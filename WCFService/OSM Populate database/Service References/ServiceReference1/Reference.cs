/* 

This file is part of ProtoWorld. 
	
ProtoWorld is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with this library. If not, see <http://www.gnu.org/licenses/>.

Authors of ProtoWorld: Miguel Ramos Carretero, Jayanth Raghothama, Aram Azhari, Johnson Ho and Sebastiaan Meijer. 

*/

ï»¿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OSMPopulatedatabase.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BoundsWCF", Namespace="http://schemas.datacontract.org/2004/07/GapslabWCFservice")]
    [System.SerializableAttribute()]
    public partial class BoundsWCF : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double maxlatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double maxlonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double minlatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double minlonField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double maxlat {
            get {
                return this.maxlatField;
            }
            set {
                if ((this.maxlatField.Equals(value) != true)) {
                    this.maxlatField = value;
                    this.RaisePropertyChanged("maxlat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double maxlon {
            get {
                return this.maxlonField;
            }
            set {
                if ((this.maxlonField.Equals(value) != true)) {
                    this.maxlonField = value;
                    this.RaisePropertyChanged("maxlon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double minlat {
            get {
                return this.minlatField;
            }
            set {
                if ((this.minlatField.Equals(value) != true)) {
                    this.minlatField = value;
                    this.RaisePropertyChanged("minlat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double minlon {
            get {
                return this.minlonField;
            }
            set {
                if ((this.minlonField.Equals(value) != true)) {
                    this.minlonField = value;
                    this.RaisePropertyChanged("minlon");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OsmNodeWCF", Namespace="http://schemas.datacontract.org/2004/07/GapslabWCFservice")]
    [System.SerializableAttribute()]
    public partial class OsmNodeWCF : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double latField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double lonField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int orderField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string id {
            get {
                return this.idField;
            }
            set {
                if ((object.ReferenceEquals(this.idField, value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double lat {
            get {
                return this.latField;
            }
            set {
                if ((this.latField.Equals(value) != true)) {
                    this.latField = value;
                    this.RaisePropertyChanged("lat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double lon {
            get {
                return this.lonField;
            }
            set {
                if ((this.lonField.Equals(value) != true)) {
                    this.lonField = value;
                    this.RaisePropertyChanged("lon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int order {
            get {
                return this.orderField;
            }
            set {
                if ((this.orderField.Equals(value) != true)) {
                    this.orderField = value;
                    this.RaisePropertyChanged("order");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TagWCF", Namespace="http://schemas.datacontract.org/2004/07/GapslabWCFservice")]
    [System.SerializableAttribute()]
    public partial class TagWCF : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] KeyValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] KeyValue {
            get {
                return this.KeyValueField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyValueField, value) != true)) {
                    this.KeyValueField = value;
                    this.RaisePropertyChanged("KeyValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VehicleEnum", Namespace="http://schemas.datacontract.org/2004/07/OsmSharp.Routing")]
    public enum VehicleEnum : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Pedestrian = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Bicycle = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Moped = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MotorCycle = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Car = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SmallTruck = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BigTruck = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Bus = 7,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TimeStep", Namespace="http://schemas.datacontract.org/2004/07/GapslabWCFservice")]
    [System.SerializableAttribute()]
    public partial class TimeStep : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OSMPopulatedatabase.ServiceReference1.VehicleFCD[] VehiclesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime iMobilityTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int indexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float timeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OSMPopulatedatabase.ServiceReference1.VehicleFCD[] Vehicles {
            get {
                return this.VehiclesField;
            }
            set {
                if ((object.ReferenceEquals(this.VehiclesField, value) != true)) {
                    this.VehiclesField = value;
                    this.RaisePropertyChanged("Vehicles");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime iMobilityTime {
            get {
                return this.iMobilityTimeField;
            }
            set {
                if ((this.iMobilityTimeField.Equals(value) != true)) {
                    this.iMobilityTimeField = value;
                    this.RaisePropertyChanged("iMobilityTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int index {
            get {
                return this.indexField;
            }
            set {
                if ((this.indexField.Equals(value) != true)) {
                    this.indexField = value;
                    this.RaisePropertyChanged("index");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float time {
            get {
                return this.timeField;
            }
            set {
                if ((this.timeField.Equals(value) != true)) {
                    this.timeField = value;
                    this.RaisePropertyChanged("time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VehicleFCD", Namespace="http://schemas.datacontract.org/2004/07/GapslabWCFservice")]
    [System.SerializableAttribute()]
    public partial class VehicleFCD : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float AngleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LaneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float LatitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float LongitudeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float PosField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float SlopeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float SpeedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private OSMPopulatedatabase.ServiceReference1.SUMOSimulationFCDVehicleType VehicleTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Angle {
            get {
                return this.AngleField;
            }
            set {
                if ((this.AngleField.Equals(value) != true)) {
                    this.AngleField = value;
                    this.RaisePropertyChanged("Angle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Lane {
            get {
                return this.LaneField;
            }
            set {
                if ((object.ReferenceEquals(this.LaneField, value) != true)) {
                    this.LaneField = value;
                    this.RaisePropertyChanged("Lane");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Pos {
            get {
                return this.PosField;
            }
            set {
                if ((this.PosField.Equals(value) != true)) {
                    this.PosField = value;
                    this.RaisePropertyChanged("Pos");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Slope {
            get {
                return this.SlopeField;
            }
            set {
                if ((this.SlopeField.Equals(value) != true)) {
                    this.SlopeField = value;
                    this.RaisePropertyChanged("Slope");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Speed {
            get {
                return this.SpeedField;
            }
            set {
                if ((this.SpeedField.Equals(value) != true)) {
                    this.SpeedField = value;
                    this.RaisePropertyChanged("Speed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public OSMPopulatedatabase.ServiceReference1.SUMOSimulationFCDVehicleType VehicleType {
            get {
                return this.VehicleTypeField;
            }
            set {
                if ((this.VehicleTypeField.Equals(value) != true)) {
                    this.VehicleTypeField = value;
                    this.RaisePropertyChanged("VehicleType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SUMOSimulationFCD.VehicleType", Namespace="http://schemas.datacontract.org/2004/07/GapslabWCFservice")]
    public enum SUMOSimulationFCDVehicleType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Default = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Simple = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SimpleTimeStep", Namespace="http://schemas.datacontract.org/2004/07/GapslabWCFservice")]
    [System.SerializableAttribute()]
    public partial class SimpleTimeStep : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] VehicleIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float[] VehicleLatsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float[] VehicleLongsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime iMobilityTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int indexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float timeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] VehicleIds {
            get {
                return this.VehicleIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.VehicleIdsField, value) != true)) {
                    this.VehicleIdsField = value;
                    this.RaisePropertyChanged("VehicleIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float[] VehicleLats {
            get {
                return this.VehicleLatsField;
            }
            set {
                if ((object.ReferenceEquals(this.VehicleLatsField, value) != true)) {
                    this.VehicleLatsField = value;
                    this.RaisePropertyChanged("VehicleLats");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float[] VehicleLongs {
            get {
                return this.VehicleLongsField;
            }
            set {
                if ((object.ReferenceEquals(this.VehicleLongsField, value) != true)) {
                    this.VehicleLongsField = value;
                    this.RaisePropertyChanged("VehicleLongs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime iMobilityTime {
            get {
                return this.iMobilityTimeField;
            }
            set {
                if ((this.iMobilityTimeField.Equals(value) != true)) {
                    this.iMobilityTimeField = value;
                    this.RaisePropertyChanged("iMobilityTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int index {
            get {
                return this.indexField;
            }
            set {
                if ((this.indexField.Equals(value) != true)) {
                    this.indexField = value;
                    this.RaisePropertyChanged("index");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float time {
            get {
                return this.timeField;
            }
            set {
                if ((this.timeField.Equals(value) != true)) {
                    this.timeField = value;
                    this.RaisePropertyChanged("time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ServiceGapslabs")]
    public interface ServiceGapslabs {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetRelationIds", ReplyAction="http://tempuri.org/ServiceGapslabs/GetRelationIdsResponse")]
        string[] GetRelationIds(string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetRelationIds", ReplyAction="http://tempuri.org/ServiceGapslabs/GetRelationIdsResponse")]
        System.Threading.Tasks.Task<string[]> GetRelationIdsAsync(string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetRelationMembers", ReplyAction="http://tempuri.org/ServiceGapslabs/GetRelationMembersResponse")]
        Aram.OSMParser.Member[] GetRelationMembers(string connectionString, string relationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetRelationMembers", ReplyAction="http://tempuri.org/ServiceGapslabs/GetRelationMembersResponse")]
        System.Threading.Tasks.Task<Aram.OSMParser.Member[]> GetRelationMembersAsync(string connectionString, string relationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetWayIds", ReplyAction="http://tempuri.org/ServiceGapslabs/GetWayIdsResponse")]
        string[] GetWayIds(string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetWayIds", ReplyAction="http://tempuri.org/ServiceGapslabs/GetWayIdsResponse")]
        System.Threading.Tasks.Task<string[]> GetWayIdsAsync(string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetWayIdsWithIdCriteria", ReplyAction="http://tempuri.org/ServiceGapslabs/GetWayIdsWithIdCriteriaResponse")]
        string[] GetWayIdsWithIdCriteria(string connectionString, string IdCriteria);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetWayIdsWithIdCriteria", ReplyAction="http://tempuri.org/ServiceGapslabs/GetWayIdsWithIdCriteriaResponse")]
        System.Threading.Tasks.Task<string[]> GetWayIdsWithIdCriteriaAsync(string connectionString, string IdCriteria);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetWayIdsInStockholm", ReplyAction="http://tempuri.org/ServiceGapslabs/GetWayIdsInStockholmResponse")]
        string[] GetWayIdsInStockholm(string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetWayIdsInStockholm", ReplyAction="http://tempuri.org/ServiceGapslabs/GetWayIdsInStockholmResponse")]
        System.Threading.Tasks.Task<string[]> GetWayIdsInStockholmAsync(string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetWayIdsInBound", ReplyAction="http://tempuri.org/ServiceGapslabs/GetWayIdsInBoundResponse")]
        string[] GetWayIdsInBound(string connectionString, OSMPopulatedatabase.ServiceReference1.BoundsWCF bound);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetWayIdsInBound", ReplyAction="http://tempuri.org/ServiceGapslabs/GetWayIdsInBoundResponse")]
        System.Threading.Tasks.Task<string[]> GetWayIdsInBoundAsync(string connectionString, OSMPopulatedatabase.ServiceReference1.BoundsWCF bound);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetWayExtIdsInBound", ReplyAction="http://tempuri.org/ServiceGapslabs/GetWayExtIdsInBoundResponse")]
        string[][] GetWayExtIdsInBound(string connectionString, OSMPopulatedatabase.ServiceReference1.BoundsWCF bound);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetWayExtIdsInBound", ReplyAction="http://tempuri.org/ServiceGapslabs/GetWayExtIdsInBoundResponse")]
        System.Threading.Tasks.Task<string[][]> GetWayExtIdsInBoundAsync(string connectionString, OSMPopulatedatabase.ServiceReference1.BoundsWCF bound);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetNodeIdsInBoundWithInfo", ReplyAction="http://tempuri.org/ServiceGapslabs/GetNodeIdsInBoundWithInfoResponse")]
        string[] GetNodeIdsInBoundWithInfo(string connectionString, OSMPopulatedatabase.ServiceReference1.BoundsWCF bound, string infoTag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetNodeIdsInBoundWithInfo", ReplyAction="http://tempuri.org/ServiceGapslabs/GetNodeIdsInBoundWithInfoResponse")]
        System.Threading.Tasks.Task<string[]> GetNodeIdsInBoundWithInfoAsync(string connectionString, OSMPopulatedatabase.ServiceReference1.BoundsWCF bound, string infoTag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetNodeIdsInBoundWithKeyValueTag", ReplyAction="http://tempuri.org/ServiceGapslabs/GetNodeIdsInBoundWithKeyValueTagResponse")]
        string[] GetNodeIdsInBoundWithKeyValueTag(string connectionString, OSMPopulatedatabase.ServiceReference1.BoundsWCF bound, string[][] infoTag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetNodeIdsInBoundWithKeyValueTag", ReplyAction="http://tempuri.org/ServiceGapslabs/GetNodeIdsInBoundWithKeyValueTagResponse")]
        System.Threading.Tasks.Task<string[]> GetNodeIdsInBoundWithKeyValueTagAsync(string connectionString, OSMPopulatedatabase.ServiceReference1.BoundsWCF bound, string[][] infoTag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetNodeInfo", ReplyAction="http://tempuri.org/ServiceGapslabs/GetNodeInfoResponse")]
        OSMPopulatedatabase.ServiceReference1.OsmNodeWCF GetNodeInfo(string nodeid, string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetNodeInfo", ReplyAction="http://tempuri.org/ServiceGapslabs/GetNodeInfoResponse")]
        System.Threading.Tasks.Task<OSMPopulatedatabase.ServiceReference1.OsmNodeWCF> GetNodeInfoAsync(string nodeid, string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetWayExtNodes", ReplyAction="http://tempuri.org/ServiceGapslabs/GetWayExtNodesResponse")]
        OSMPopulatedatabase.ServiceReference1.OsmNodeWCF[] GetWayExtNodes(string wayid, string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetWayExtNodes", ReplyAction="http://tempuri.org/ServiceGapslabs/GetWayExtNodesResponse")]
        System.Threading.Tasks.Task<OSMPopulatedatabase.ServiceReference1.OsmNodeWCF[]> GetWayExtNodesAsync(string wayid, string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetWayNodes", ReplyAction="http://tempuri.org/ServiceGapslabs/GetWayNodesResponse")]
        OSMPopulatedatabase.ServiceReference1.OsmNodeWCF[] GetWayNodes(string wayid, string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetWayNodes", ReplyAction="http://tempuri.org/ServiceGapslabs/GetWayNodesResponse")]
        System.Threading.Tasks.Task<OSMPopulatedatabase.ServiceReference1.OsmNodeWCF[]> GetWayNodesAsync(string wayid, string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetRelationTags", ReplyAction="http://tempuri.org/ServiceGapslabs/GetRelationTagsResponse")]
        OSMPopulatedatabase.ServiceReference1.TagWCF[] GetRelationTags(string relationid, string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetRelationTags", ReplyAction="http://tempuri.org/ServiceGapslabs/GetRelationTagsResponse")]
        System.Threading.Tasks.Task<OSMPopulatedatabase.ServiceReference1.TagWCF[]> GetRelationTagsAsync(string relationid, string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetWayTags", ReplyAction="http://tempuri.org/ServiceGapslabs/GetWayTagsResponse")]
        OSMPopulatedatabase.ServiceReference1.TagWCF[] GetWayTags(string wayid, string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetWayTags", ReplyAction="http://tempuri.org/ServiceGapslabs/GetWayTagsResponse")]
        System.Threading.Tasks.Task<OSMPopulatedatabase.ServiceReference1.TagWCF[]> GetWayTagsAsync(string wayid, string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetWayTagsStockholm", ReplyAction="http://tempuri.org/ServiceGapslabs/GetWayTagsStockholmResponse")]
        OSMPopulatedatabase.ServiceReference1.TagWCF[] GetWayTagsStockholm(string wayid, string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetWayTagsStockholm", ReplyAction="http://tempuri.org/ServiceGapslabs/GetWayTagsStockholmResponse")]
        System.Threading.Tasks.Task<OSMPopulatedatabase.ServiceReference1.TagWCF[]> GetWayTagsStockholmAsync(string wayid, string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetNodeTags", ReplyAction="http://tempuri.org/ServiceGapslabs/GetNodeTagsResponse")]
        OSMPopulatedatabase.ServiceReference1.TagWCF[] GetNodeTags(string nodeid, string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetNodeTags", ReplyAction="http://tempuri.org/ServiceGapslabs/GetNodeTagsResponse")]
        System.Threading.Tasks.Task<OSMPopulatedatabase.ServiceReference1.TagWCF[]> GetNodeTagsAsync(string nodeid, string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetBounds", ReplyAction="http://tempuri.org/ServiceGapslabs/GetBoundsResponse")]
        OSMPopulatedatabase.ServiceReference1.BoundsWCF GetBounds(string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetBounds", ReplyAction="http://tempuri.org/ServiceGapslabs/GetBoundsResponse")]
        System.Threading.Tasks.Task<OSMPopulatedatabase.ServiceReference1.BoundsWCF> GetBoundsAsync(string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/InitializeRouter", ReplyAction="http://tempuri.org/ServiceGapslabs/InitializeRouterResponse")]
        string InitializeRouter(string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/InitializeRouter", ReplyAction="http://tempuri.org/ServiceGapslabs/InitializeRouterResponse")]
        System.Threading.Tasks.Task<string> InitializeRouterAsync(string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/ResolvePoint", ReplyAction="http://tempuri.org/ServiceGapslabs/ResolvePointResponse")]
        OSMPopulatedatabase.ServiceReference1.OsmNodeWCF ResolvePoint(OSMPopulatedatabase.ServiceReference1.VehicleEnum vehicle, OSMPopulatedatabase.ServiceReference1.OsmNodeWCF currentNode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/ResolvePoint", ReplyAction="http://tempuri.org/ServiceGapslabs/ResolvePointResponse")]
        System.Threading.Tasks.Task<OSMPopulatedatabase.ServiceReference1.OsmNodeWCF> ResolvePointAsync(OSMPopulatedatabase.ServiceReference1.VehicleEnum vehicle, OSMPopulatedatabase.ServiceReference1.OsmNodeWCF currentNode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/RouteUsingDykstra", ReplyAction="http://tempuri.org/ServiceGapslabs/RouteUsingDykstraResponse")]
        OSMPopulatedatabase.ServiceReference1.OsmNodeWCF[] RouteUsingDykstra(OSMPopulatedatabase.ServiceReference1.VehicleEnum vehicle, OSMPopulatedatabase.ServiceReference1.OsmNodeWCF pointA, OSMPopulatedatabase.ServiceReference1.OsmNodeWCF pointB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/RouteUsingDykstra", ReplyAction="http://tempuri.org/ServiceGapslabs/RouteUsingDykstraResponse")]
        System.Threading.Tasks.Task<OSMPopulatedatabase.ServiceReference1.OsmNodeWCF[]> RouteUsingDykstraAsync(OSMPopulatedatabase.ServiceReference1.VehicleEnum vehicle, OSMPopulatedatabase.ServiceReference1.OsmNodeWCF pointA, OSMPopulatedatabase.ServiceReference1.OsmNodeWCF pointB);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetGeometryCollectionSingleObject", ReplyAction="http://tempuri.org/ServiceGapslabs/GetGeometryCollectionSingleObjectResponse")]
        Aram.OSMParser.geometryCollection GetGeometryCollectionSingleObject(string id, bool includeLargeObject, string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetGeometryCollectionSingleObject", ReplyAction="http://tempuri.org/ServiceGapslabs/GetGeometryCollectionSingleObjectResponse")]
        System.Threading.Tasks.Task<Aram.OSMParser.geometryCollection> GetGeometryCollectionSingleObjectAsync(string id, bool includeLargeObject, string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetGeometryCollection", ReplyAction="http://tempuri.org/ServiceGapslabs/GetGeometryCollectionResponse")]
        Aram.OSMParser.geometryCollection[] GetGeometryCollection(bool includeLargeObject, string SearchCriteriaWhereClause, string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetGeometryCollection", ReplyAction="http://tempuri.org/ServiceGapslabs/GetGeometryCollectionResponse")]
        System.Threading.Tasks.Task<Aram.OSMParser.geometryCollection[]> GetGeometryCollectionAsync(bool includeLargeObject, string SearchCriteriaWhereClause, string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetGeometryCollectionMinimal", ReplyAction="http://tempuri.org/ServiceGapslabs/GetGeometryCollectionMinimalResponse")]
        long[] GetGeometryCollectionMinimal(string SearchCriteriaWhereClause, string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetGeometryCollectionMinimal", ReplyAction="http://tempuri.org/ServiceGapslabs/GetGeometryCollectionMinimalResponse")]
        System.Threading.Tasks.Task<long[]> GetGeometryCollectionMinimalAsync(string SearchCriteriaWhereClause, string connectionString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/InitializeSimulationList", ReplyAction="http://tempuri.org/ServiceGapslabs/InitializeSimulationListResponse")]
        void InitializeSimulationList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/InitializeSimulationList", ReplyAction="http://tempuri.org/ServiceGapslabs/InitializeSimulationListResponse")]
        System.Threading.Tasks.Task InitializeSimulationListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/DisposeSimulation", ReplyAction="http://tempuri.org/ServiceGapslabs/DisposeSimulationResponse")]
        bool DisposeSimulation(string SimulationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/DisposeSimulation", ReplyAction="http://tempuri.org/ServiceGapslabs/DisposeSimulationResponse")]
        System.Threading.Tasks.Task<bool> DisposeSimulationAsync(string SimulationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GenerateRandomID", ReplyAction="http://tempuri.org/ServiceGapslabs/GenerateRandomIDResponse")]
        string GenerateRandomID(string initial);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GenerateRandomID", ReplyAction="http://tempuri.org/ServiceGapslabs/GenerateRandomIDResponse")]
        System.Threading.Tasks.Task<string> GenerateRandomIDAsync(string initial);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetTotalTimesteps", ReplyAction="http://tempuri.org/ServiceGapslabs/GetTotalTimestepsResponse")]
        int GetTotalTimesteps();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetTotalTimesteps", ReplyAction="http://tempuri.org/ServiceGapslabs/GetTotalTimestepsResponse")]
        System.Threading.Tasks.Task<int> GetTotalTimestepsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetTotalTimestepsList", ReplyAction="http://tempuri.org/ServiceGapslabs/GetTotalTimestepsListResponse")]
        int GetTotalTimestepsList(int SimulationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetTotalTimestepsList", ReplyAction="http://tempuri.org/ServiceGapslabs/GetTotalTimestepsListResponse")]
        System.Threading.Tasks.Task<int> GetTotalTimestepsListAsync(int SimulationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetTimestepAt", ReplyAction="http://tempuri.org/ServiceGapslabs/GetTimestepAtResponse")]
        OSMPopulatedatabase.ServiceReference1.TimeStep GetTimestepAt(int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetTimestepAt", ReplyAction="http://tempuri.org/ServiceGapslabs/GetTimestepAtResponse")]
        System.Threading.Tasks.Task<OSMPopulatedatabase.ServiceReference1.TimeStep> GetTimestepAtAsync(int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetTimestepAtList", ReplyAction="http://tempuri.org/ServiceGapslabs/GetTimestepAtListResponse")]
        OSMPopulatedatabase.ServiceReference1.TimeStep GetTimestepAtList(int index, int SimulationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetTimestepAtList", ReplyAction="http://tempuri.org/ServiceGapslabs/GetTimestepAtListResponse")]
        System.Threading.Tasks.Task<OSMPopulatedatabase.ServiceReference1.TimeStep> GetTimestepAtListAsync(int index, int SimulationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetSimpleTimestepAtList", ReplyAction="http://tempuri.org/ServiceGapslabs/GetSimpleTimestepAtListResponse")]
        OSMPopulatedatabase.ServiceReference1.SimpleTimeStep GetSimpleTimestepAtList(int index, int SimulationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetSimpleTimestepAtList", ReplyAction="http://tempuri.org/ServiceGapslabs/GetSimpleTimestepAtListResponse")]
        System.Threading.Tasks.Task<OSMPopulatedatabase.ServiceReference1.SimpleTimeStep> GetSimpleTimestepAtListAsync(int index, int SimulationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetSimulationName", ReplyAction="http://tempuri.org/ServiceGapslabs/GetSimulationNameResponse")]
        string GetSimulationName();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetSimulationName", ReplyAction="http://tempuri.org/ServiceGapslabs/GetSimulationNameResponse")]
        System.Threading.Tasks.Task<string> GetSimulationNameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetSimulationNameList", ReplyAction="http://tempuri.org/ServiceGapslabs/GetSimulationNameListResponse")]
        string GetSimulationNameList(int SimulationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetSimulationNameList", ReplyAction="http://tempuri.org/ServiceGapslabs/GetSimulationNameListResponse")]
        System.Threading.Tasks.Task<string> GetSimulationNameListAsync(int SimulationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetSimulationDescription", ReplyAction="http://tempuri.org/ServiceGapslabs/GetSimulationDescriptionResponse")]
        string GetSimulationDescription();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetSimulationDescription", ReplyAction="http://tempuri.org/ServiceGapslabs/GetSimulationDescriptionResponse")]
        System.Threading.Tasks.Task<string> GetSimulationDescriptionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetSimulationDescriptionList", ReplyAction="http://tempuri.org/ServiceGapslabs/GetSimulationDescriptionListResponse")]
        string GetSimulationDescriptionList(int SimulationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/GetSimulationDescriptionList", ReplyAction="http://tempuri.org/ServiceGapslabs/GetSimulationDescriptionListResponse")]
        System.Threading.Tasks.Task<string> GetSimulationDescriptionListAsync(int SimulationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/IsSimulationLoaded", ReplyAction="http://tempuri.org/ServiceGapslabs/IsSimulationLoadedResponse")]
        bool IsSimulationLoaded();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/IsSimulationLoaded", ReplyAction="http://tempuri.org/ServiceGapslabs/IsSimulationLoadedResponse")]
        System.Threading.Tasks.Task<bool> IsSimulationLoadedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/IsSimulationLoadedList", ReplyAction="http://tempuri.org/ServiceGapslabs/IsSimulationLoadedListResponse")]
        bool IsSimulationLoadedList(int SimulationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/IsSimulationLoadedList", ReplyAction="http://tempuri.org/ServiceGapslabs/IsSimulationLoadedListResponse")]
        System.Threading.Tasks.Task<bool> IsSimulationLoadedListAsync(int SimulationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/LoadSUMOFCDSimulation", ReplyAction="http://tempuri.org/ServiceGapslabs/LoadSUMOFCDSimulationResponse")]
        void LoadSUMOFCDSimulation(string filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/LoadSUMOFCDSimulation", ReplyAction="http://tempuri.org/ServiceGapslabs/LoadSUMOFCDSimulationResponse")]
        System.Threading.Tasks.Task LoadSUMOFCDSimulationAsync(string filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/LoadSUMOFCDSimulationList", ReplyAction="http://tempuri.org/ServiceGapslabs/LoadSUMOFCDSimulationListResponse")]
        int LoadSUMOFCDSimulationList(string filename, string ObjectIDPostfix);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ServiceGapslabs/LoadSUMOFCDSimulationList", ReplyAction="http://tempuri.org/ServiceGapslabs/LoadSUMOFCDSimulationListResponse")]
        System.Threading.Tasks.Task<int> LoadSUMOFCDSimulationListAsync(string filename, string ObjectIDPostfix);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ServiceGapslabsChannel : OSMPopulatedatabase.ServiceReference1.ServiceGapslabs, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceGapslabsClient : System.ServiceModel.ClientBase<OSMPopulatedatabase.ServiceReference1.ServiceGapslabs>, OSMPopulatedatabase.ServiceReference1.ServiceGapslabs {
        
        public ServiceGapslabsClient() {
        }
        
        public ServiceGapslabsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceGapslabsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceGapslabsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceGapslabsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetRelationIds(string connectionString) {
            return base.Channel.GetRelationIds(connectionString);
        }
        
        public System.Threading.Tasks.Task<string[]> GetRelationIdsAsync(string connectionString) {
            return base.Channel.GetRelationIdsAsync(connectionString);
        }
        
        public Aram.OSMParser.Member[] GetRelationMembers(string connectionString, string relationId) {
            return base.Channel.GetRelationMembers(connectionString, relationId);
        }
        
        public System.Threading.Tasks.Task<Aram.OSMParser.Member[]> GetRelationMembersAsync(string connectionString, string relationId) {
            return base.Channel.GetRelationMembersAsync(connectionString, relationId);
        }
        
        public string[] GetWayIds(string connectionString) {
            return base.Channel.GetWayIds(connectionString);
        }
        
        public System.Threading.Tasks.Task<string[]> GetWayIdsAsync(string connectionString) {
            return base.Channel.GetWayIdsAsync(connectionString);
        }
        
        public string[] GetWayIdsWithIdCriteria(string connectionString, string IdCriteria) {
            return base.Channel.GetWayIdsWithIdCriteria(connectionString, IdCriteria);
        }
        
        public System.Threading.Tasks.Task<string[]> GetWayIdsWithIdCriteriaAsync(string connectionString, string IdCriteria) {
            return base.Channel.GetWayIdsWithIdCriteriaAsync(connectionString, IdCriteria);
        }
        
        public string[] GetWayIdsInStockholm(string connectionString) {
            return base.Channel.GetWayIdsInStockholm(connectionString);
        }
        
        public System.Threading.Tasks.Task<string[]> GetWayIdsInStockholmAsync(string connectionString) {
            return base.Channel.GetWayIdsInStockholmAsync(connectionString);
        }
        
        public string[] GetWayIdsInBound(string connectionString, OSMPopulatedatabase.ServiceReference1.BoundsWCF bound) {
            return base.Channel.GetWayIdsInBound(connectionString, bound);
        }
        
        public System.Threading.Tasks.Task<string[]> GetWayIdsInBoundAsync(string connectionString, OSMPopulatedatabase.ServiceReference1.BoundsWCF bound) {
            return base.Channel.GetWayIdsInBoundAsync(connectionString, bound);
        }
        
        public string[][] GetWayExtIdsInBound(string connectionString, OSMPopulatedatabase.ServiceReference1.BoundsWCF bound) {
            return base.Channel.GetWayExtIdsInBound(connectionString, bound);
        }
        
        public System.Threading.Tasks.Task<string[][]> GetWayExtIdsInBoundAsync(string connectionString, OSMPopulatedatabase.ServiceReference1.BoundsWCF bound) {
            return base.Channel.GetWayExtIdsInBoundAsync(connectionString, bound);
        }
        
        public string[] GetNodeIdsInBoundWithInfo(string connectionString, OSMPopulatedatabase.ServiceReference1.BoundsWCF bound, string infoTag) {
            return base.Channel.GetNodeIdsInBoundWithInfo(connectionString, bound, infoTag);
        }
        
        public System.Threading.Tasks.Task<string[]> GetNodeIdsInBoundWithInfoAsync(string connectionString, OSMPopulatedatabase.ServiceReference1.BoundsWCF bound, string infoTag) {
            return base.Channel.GetNodeIdsInBoundWithInfoAsync(connectionString, bound, infoTag);
        }
        
        public string[] GetNodeIdsInBoundWithKeyValueTag(string connectionString, OSMPopulatedatabase.ServiceReference1.BoundsWCF bound, string[][] infoTag) {
            return base.Channel.GetNodeIdsInBoundWithKeyValueTag(connectionString, bound, infoTag);
        }
        
        public System.Threading.Tasks.Task<string[]> GetNodeIdsInBoundWithKeyValueTagAsync(string connectionString, OSMPopulatedatabase.ServiceReference1.BoundsWCF bound, string[][] infoTag) {
            return base.Channel.GetNodeIdsInBoundWithKeyValueTagAsync(connectionString, bound, infoTag);
        }
        
        public OSMPopulatedatabase.ServiceReference1.OsmNodeWCF GetNodeInfo(string nodeid, string connectionString) {
            return base.Channel.GetNodeInfo(nodeid, connectionString);
        }
        
        public System.Threading.Tasks.Task<OSMPopulatedatabase.ServiceReference1.OsmNodeWCF> GetNodeInfoAsync(string nodeid, string connectionString) {
            return base.Channel.GetNodeInfoAsync(nodeid, connectionString);
        }
        
        public OSMPopulatedatabase.ServiceReference1.OsmNodeWCF[] GetWayExtNodes(string wayid, string connectionString) {
            return base.Channel.GetWayExtNodes(wayid, connectionString);
        }
        
        public System.Threading.Tasks.Task<OSMPopulatedatabase.ServiceReference1.OsmNodeWCF[]> GetWayExtNodesAsync(string wayid, string connectionString) {
            return base.Channel.GetWayExtNodesAsync(wayid, connectionString);
        }
        
        public OSMPopulatedatabase.ServiceReference1.OsmNodeWCF[] GetWayNodes(string wayid, string connectionString) {
            return base.Channel.GetWayNodes(wayid, connectionString);
        }
        
        public System.Threading.Tasks.Task<OSMPopulatedatabase.ServiceReference1.OsmNodeWCF[]> GetWayNodesAsync(string wayid, string connectionString) {
            return base.Channel.GetWayNodesAsync(wayid, connectionString);
        }
        
        public OSMPopulatedatabase.ServiceReference1.TagWCF[] GetRelationTags(string relationid, string connectionString) {
            return base.Channel.GetRelationTags(relationid, connectionString);
        }
        
        public System.Threading.Tasks.Task<OSMPopulatedatabase.ServiceReference1.TagWCF[]> GetRelationTagsAsync(string relationid, string connectionString) {
            return base.Channel.GetRelationTagsAsync(relationid, connectionString);
        }
        
        public OSMPopulatedatabase.ServiceReference1.TagWCF[] GetWayTags(string wayid, string connectionString) {
            return base.Channel.GetWayTags(wayid, connectionString);
        }
        
        public System.Threading.Tasks.Task<OSMPopulatedatabase.ServiceReference1.TagWCF[]> GetWayTagsAsync(string wayid, string connectionString) {
            return base.Channel.GetWayTagsAsync(wayid, connectionString);
        }
        
        public OSMPopulatedatabase.ServiceReference1.TagWCF[] GetWayTagsStockholm(string wayid, string connectionString) {
            return base.Channel.GetWayTagsStockholm(wayid, connectionString);
        }
        
        public System.Threading.Tasks.Task<OSMPopulatedatabase.ServiceReference1.TagWCF[]> GetWayTagsStockholmAsync(string wayid, string connectionString) {
            return base.Channel.GetWayTagsStockholmAsync(wayid, connectionString);
        }
        
        public OSMPopulatedatabase.ServiceReference1.TagWCF[] GetNodeTags(string nodeid, string connectionString) {
            return base.Channel.GetNodeTags(nodeid, connectionString);
        }
        
        public System.Threading.Tasks.Task<OSMPopulatedatabase.ServiceReference1.TagWCF[]> GetNodeTagsAsync(string nodeid, string connectionString) {
            return base.Channel.GetNodeTagsAsync(nodeid, connectionString);
        }
        
        public OSMPopulatedatabase.ServiceReference1.BoundsWCF GetBounds(string connectionString) {
            return base.Channel.GetBounds(connectionString);
        }
        
        public System.Threading.Tasks.Task<OSMPopulatedatabase.ServiceReference1.BoundsWCF> GetBoundsAsync(string connectionString) {
            return base.Channel.GetBoundsAsync(connectionString);
        }
        
        public string InitializeRouter(string connectionString) {
            return base.Channel.InitializeRouter(connectionString);
        }
        
        public System.Threading.Tasks.Task<string> InitializeRouterAsync(string connectionString) {
            return base.Channel.InitializeRouterAsync(connectionString);
        }
        
        public OSMPopulatedatabase.ServiceReference1.OsmNodeWCF ResolvePoint(OSMPopulatedatabase.ServiceReference1.VehicleEnum vehicle, OSMPopulatedatabase.ServiceReference1.OsmNodeWCF currentNode) {
            return base.Channel.ResolvePoint(vehicle, currentNode);
        }
        
        public System.Threading.Tasks.Task<OSMPopulatedatabase.ServiceReference1.OsmNodeWCF> ResolvePointAsync(OSMPopulatedatabase.ServiceReference1.VehicleEnum vehicle, OSMPopulatedatabase.ServiceReference1.OsmNodeWCF currentNode) {
            return base.Channel.ResolvePointAsync(vehicle, currentNode);
        }
        
        public OSMPopulatedatabase.ServiceReference1.OsmNodeWCF[] RouteUsingDykstra(OSMPopulatedatabase.ServiceReference1.VehicleEnum vehicle, OSMPopulatedatabase.ServiceReference1.OsmNodeWCF pointA, OSMPopulatedatabase.ServiceReference1.OsmNodeWCF pointB) {
            return base.Channel.RouteUsingDykstra(vehicle, pointA, pointB);
        }
        
        public System.Threading.Tasks.Task<OSMPopulatedatabase.ServiceReference1.OsmNodeWCF[]> RouteUsingDykstraAsync(OSMPopulatedatabase.ServiceReference1.VehicleEnum vehicle, OSMPopulatedatabase.ServiceReference1.OsmNodeWCF pointA, OSMPopulatedatabase.ServiceReference1.OsmNodeWCF pointB) {
            return base.Channel.RouteUsingDykstraAsync(vehicle, pointA, pointB);
        }
        
        public Aram.OSMParser.geometryCollection GetGeometryCollectionSingleObject(string id, bool includeLargeObject, string connectionString) {
            return base.Channel.GetGeometryCollectionSingleObject(id, includeLargeObject, connectionString);
        }
        
        public System.Threading.Tasks.Task<Aram.OSMParser.geometryCollection> GetGeometryCollectionSingleObjectAsync(string id, bool includeLargeObject, string connectionString) {
            return base.Channel.GetGeometryCollectionSingleObjectAsync(id, includeLargeObject, connectionString);
        }
        
        public Aram.OSMParser.geometryCollection[] GetGeometryCollection(bool includeLargeObject, string SearchCriteriaWhereClause, string connectionString) {
            return base.Channel.GetGeometryCollection(includeLargeObject, SearchCriteriaWhereClause, connectionString);
        }
        
        public System.Threading.Tasks.Task<Aram.OSMParser.geometryCollection[]> GetGeometryCollectionAsync(bool includeLargeObject, string SearchCriteriaWhereClause, string connectionString) {
            return base.Channel.GetGeometryCollectionAsync(includeLargeObject, SearchCriteriaWhereClause, connectionString);
        }
        
        public long[] GetGeometryCollectionMinimal(string SearchCriteriaWhereClause, string connectionString) {
            return base.Channel.GetGeometryCollectionMinimal(SearchCriteriaWhereClause, connectionString);
        }
        
        public System.Threading.Tasks.Task<long[]> GetGeometryCollectionMinimalAsync(string SearchCriteriaWhereClause, string connectionString) {
            return base.Channel.GetGeometryCollectionMinimalAsync(SearchCriteriaWhereClause, connectionString);
        }
        
        public void InitializeSimulationList() {
            base.Channel.InitializeSimulationList();
        }
        
        public System.Threading.Tasks.Task InitializeSimulationListAsync() {
            return base.Channel.InitializeSimulationListAsync();
        }
        
        public bool DisposeSimulation(string SimulationID) {
            return base.Channel.DisposeSimulation(SimulationID);
        }
        
        public System.Threading.Tasks.Task<bool> DisposeSimulationAsync(string SimulationID) {
            return base.Channel.DisposeSimulationAsync(SimulationID);
        }
        
        public string GenerateRandomID(string initial) {
            return base.Channel.GenerateRandomID(initial);
        }
        
        public System.Threading.Tasks.Task<string> GenerateRandomIDAsync(string initial) {
            return base.Channel.GenerateRandomIDAsync(initial);
        }
        
        public int GetTotalTimesteps() {
            return base.Channel.GetTotalTimesteps();
        }
        
        public System.Threading.Tasks.Task<int> GetTotalTimestepsAsync() {
            return base.Channel.GetTotalTimestepsAsync();
        }
        
        public int GetTotalTimestepsList(int SimulationID) {
            return base.Channel.GetTotalTimestepsList(SimulationID);
        }
        
        public System.Threading.Tasks.Task<int> GetTotalTimestepsListAsync(int SimulationID) {
            return base.Channel.GetTotalTimestepsListAsync(SimulationID);
        }
        
        public OSMPopulatedatabase.ServiceReference1.TimeStep GetTimestepAt(int index) {
            return base.Channel.GetTimestepAt(index);
        }
        
        public System.Threading.Tasks.Task<OSMPopulatedatabase.ServiceReference1.TimeStep> GetTimestepAtAsync(int index) {
            return base.Channel.GetTimestepAtAsync(index);
        }
        
        public OSMPopulatedatabase.ServiceReference1.TimeStep GetTimestepAtList(int index, int SimulationID) {
            return base.Channel.GetTimestepAtList(index, SimulationID);
        }
        
        public System.Threading.Tasks.Task<OSMPopulatedatabase.ServiceReference1.TimeStep> GetTimestepAtListAsync(int index, int SimulationID) {
            return base.Channel.GetTimestepAtListAsync(index, SimulationID);
        }
        
        public OSMPopulatedatabase.ServiceReference1.SimpleTimeStep GetSimpleTimestepAtList(int index, int SimulationID) {
            return base.Channel.GetSimpleTimestepAtList(index, SimulationID);
        }
        
        public System.Threading.Tasks.Task<OSMPopulatedatabase.ServiceReference1.SimpleTimeStep> GetSimpleTimestepAtListAsync(int index, int SimulationID) {
            return base.Channel.GetSimpleTimestepAtListAsync(index, SimulationID);
        }
        
        public string GetSimulationName() {
            return base.Channel.GetSimulationName();
        }
        
        public System.Threading.Tasks.Task<string> GetSimulationNameAsync() {
            return base.Channel.GetSimulationNameAsync();
        }
        
        public string GetSimulationNameList(int SimulationID) {
            return base.Channel.GetSimulationNameList(SimulationID);
        }
        
        public System.Threading.Tasks.Task<string> GetSimulationNameListAsync(int SimulationID) {
            return base.Channel.GetSimulationNameListAsync(SimulationID);
        }
        
        public string GetSimulationDescription() {
            return base.Channel.GetSimulationDescription();
        }
        
        public System.Threading.Tasks.Task<string> GetSimulationDescriptionAsync() {
            return base.Channel.GetSimulationDescriptionAsync();
        }
        
        public string GetSimulationDescriptionList(int SimulationID) {
            return base.Channel.GetSimulationDescriptionList(SimulationID);
        }
        
        public System.Threading.Tasks.Task<string> GetSimulationDescriptionListAsync(int SimulationID) {
            return base.Channel.GetSimulationDescriptionListAsync(SimulationID);
        }
        
        public bool IsSimulationLoaded() {
            return base.Channel.IsSimulationLoaded();
        }
        
        public System.Threading.Tasks.Task<bool> IsSimulationLoadedAsync() {
            return base.Channel.IsSimulationLoadedAsync();
        }
        
        public bool IsSimulationLoadedList(int SimulationID) {
            return base.Channel.IsSimulationLoadedList(SimulationID);
        }
        
        public System.Threading.Tasks.Task<bool> IsSimulationLoadedListAsync(int SimulationID) {
            return base.Channel.IsSimulationLoadedListAsync(SimulationID);
        }
        
        public void LoadSUMOFCDSimulation(string filename) {
            base.Channel.LoadSUMOFCDSimulation(filename);
        }
        
        public System.Threading.Tasks.Task LoadSUMOFCDSimulationAsync(string filename) {
            return base.Channel.LoadSUMOFCDSimulationAsync(filename);
        }
        
        public int LoadSUMOFCDSimulationList(string filename, string ObjectIDPostfix) {
            return base.Channel.LoadSUMOFCDSimulationList(filename, ObjectIDPostfix);
        }
        
        public System.Threading.Tasks.Task<int> LoadSUMOFCDSimulationListAsync(string filename, string ObjectIDPostfix) {
            return base.Channel.LoadSUMOFCDSimulationListAsync(filename, ObjectIDPostfix);
        }
    }
}
