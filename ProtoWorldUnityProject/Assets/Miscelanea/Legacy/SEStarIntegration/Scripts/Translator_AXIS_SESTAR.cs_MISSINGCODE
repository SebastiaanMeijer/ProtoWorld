using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using Connector.AXIS;
using Connector.Core;
using Connector.Generic;
using Connector.Messages.SEStar;
using Connector.Messages.String;

namespace Connector
{
    internal class Translator_AXIS_SESTAR : ITranslator
    {
        private CameraManager CameraMap_;

        public Translator_AXIS_SESTAR(CameraCollectionElement CamerasList)
            : base()
        {
            CameraMap_ = CameraManager.Instance;
            foreach (CameraElement item in CamerasList)
            {
                Camera camera = new Camera();
                camera.setObjectName(item.Name);
                CameraMap_.add(item.Address + ":" + item.Port, camera);
            }
        }

        public IMessage Translate(IMessage message, List<Object> parameters = null)
        {
            if (message is MessageString)
            {
                MessageString msg = message as MessageString;
                if (msg.Content.Contains("continuouspantiltmove"))
                {
                    string[] words2 = msg.Content.Split('=');
                    string[] words3 = words2[1].Split(',');
                    MessageParameter[] msgParameters = new MessageParameter[24];
                    MessageSEStar msgSEStar = new MessageSEStar(MessageTypes.TMSG_APPLICATION_COMMAND,
                                                                    MessageTypes.TMSG_APPLICATION_COMMAND,
                                                                    0, 0, msgParameters);

                    msgParameters[0].unsigned_ = (uint)ObjectTypes.OT_CAMERA;
                    msgParameters[1].unsigned_ = CameraMap_.get(parameters[0].ToString()).getObjectID();
                    msgParameters[2].unsigned_ = (uint)typeCommande.CT_CAMERA_PAN_TILT;
                    msgParameters[3].int_ = int.Parse(words3[0]);			// PanSpeed
                    msgParameters[4].int_ = int.Parse(words3[1]);			// TiltSpeed
                    return msgSEStar;
                }
                else if (msg.Content.Contains("continuouszoommove"))
                {
                    string[] words2 = msg.Content.Split('=');
                    MessageParameter[] msgParameters = new MessageParameter[24];
                    MessageSEStar msgSEStar = new MessageSEStar(MessageTypes.TMSG_APPLICATION_COMMAND,
                                                                    MessageTypes.TMSG_APPLICATION_COMMAND,
                                                                    0, 0, msgParameters);

                    msgParameters[0].unsigned_ = (uint)ObjectTypes.OT_CAMERA;
                    msgParameters[1].unsigned_ = CameraMap_.get(parameters[0].ToString()).getObjectID();
                    msgParameters[2].unsigned_ = (uint)typeCommande.CT_CAMERA_ZOOM;
                    msgParameters[3].int_ = int.Parse(words2[1]);			// ZoomSpeed
                    return msgSEStar;
                }
                else if (msg.Content.Contains("pan") || msg.Content.Contains("tilt") || msg.Content.Contains("zoom"))
                {
                    string[] words2 = msg.Content.Split('&');
                    float pan = 0;
                    float tilt = 0;
                    float zoom = 0;
                    CameraPositionFlag? flag = null;
                    foreach (string w in words2)
                        if (w.Contains("pan"))
                            pan = ExtractValueAndCombineFlag(w, ref flag, CameraPositionFlag.PTZ_Pan);
                        else if (w.Contains("tilt"))
                            tilt = ExtractValueAndCombineFlag(w, ref flag, CameraPositionFlag.PTZ_Tilt);
                        else if (w.Contains("zoom"))
                            zoom = ExtractValueAndCombineFlag(w, ref flag, CameraPositionFlag.PTZ_Zoom);
                    Debug.Assert(flag.HasValue);

                    MessageParameter[] msgParameters = new MessageParameter[24];
                    MessageSEStar msgSEStar = new MessageSEStar(MessageTypes.TMSG_APPLICATION_COMMAND,
                                                                    MessageTypes.TMSG_APPLICATION_COMMAND,
                                                                    0, 0, msgParameters);

                    msgParameters[0].unsigned_ = (uint)ObjectTypes.OT_CAMERA;
                    msgParameters[1].unsigned_ = CameraMap_.get(parameters[0].ToString()).getObjectID();
                    msgParameters[2].unsigned_ = (uint)typeCommande.CT_CAMERA_ABSOLUTE_POSITION;
                    msgParameters[3].int_ = (int)flag;
                    msgParameters[4].float_ = pan;
                    msgParameters[5].float_ = tilt;
                    msgParameters[6].float_ = zoom;
                    return msgSEStar;
                }
                else if (msg.Content.Contains("position"))
                {
                    CameraInfo camerInfo = CameraMap_.get(parameters[0].ToString()).getCameraInfo();
                    string reponse = "pan=" + (int)camerInfo.pan_ + "\r\ntilt=" + (int)camerInfo.tilt_ + "\r\nzoom=" + (int)camerInfo.zoom_ + "\r\nAutofocus=on\r\nAutoiris=on";
                    return new MessageString(reponse);
                }
                else if (msg.Content.Contains("PTZ.ImageSource.I0.PTZEnabled"))
                {
                    string[] words2 = msg.Content.Split('=');
                    MessageParameter[] msgParameters = new MessageParameter[24];
                    MessageSEStar msgSEStar = new MessageSEStar(MessageTypes.TMSG_APPLICATION_COMMAND,
                                                                    MessageTypes.TMSG_APPLICATION_COMMAND,
                                                                    0, 0, msgParameters);

                    msgParameters[0].unsigned_ = (uint)ObjectTypes.OT_CAMERA;
                    msgParameters[1].unsigned_ = CameraMap_.get(parameters[0].ToString()).getObjectID();
                    if (words2[1] == "yes")
                        msgParameters[2].unsigned_ = (uint)typeCommande.CT_CAMERA_SELECT;
                    else
                        msgParameters[2].unsigned_ = (uint)typeCommande.CT_CAMERA_UNSELECT;
                    return msgSEStar;
                }
            }
            return null;
        }

        private float ExtractValueAndCombineFlag(string str, ref CameraPositionFlag? flag, CameraPositionFlag add)
        {
            if (!flag.HasValue)
                flag = add;
            else
                flag |= add;

            float res = 0;
            string[] s = str.Split('=');
            Debug.Assert(s.Length == 2);
            float.TryParse(s[1], NumberStyles.AllowDecimalPoint | NumberStyles.AllowLeadingSign, CultureInfo.InvariantCulture, out res);

            return res;
        }

    }   //class
}   //namespace
