using System.Runtime.InteropServices;
using Connector.Generic;

namespace Connector.Messages.SEStar
{
	public enum ExternalApplicationTypes
	{
		TEA_UNREGISTERED = 0,
		TEA_SESTAR,
		TEA_BUSINESSSTUDIO,
		TEA_MINDSTORMS
	}

	public enum ExternalApplicationModes
	{
		MEA_BOTH = 0,
		MEA_HMI,
		MEA_SIMULATOR
	}

	public enum MessageTypes
	{
		TMSG_FIRST_TYPEMESSAGE = 0,
		TMSG_UNKNOWN = TMSG_FIRST_TYPEMESSAGE,
		
		TMSG_SET_POSITION,					// param1 : x, param2 : y, param3 : z
		TMSG_SET_ORIENTATION,				// param1 : yaw, param2 : pitch, param3 : roll
		TMSG_SET_COLOR,						// param1 : r, param2 : g, param3 : b, param4 : alpha, range for parameters : [0.0,..,1.0]
		TMSG_UPDATE_AREAS_GRP,
		TMSG_REMOVE_AREAS_GRP,
		TMSG_AREAS_NAVMESH,
		
		TMSG_STOP_SIMULATION = TMSG_FIRST_TYPEMESSAGE + 41,
		TMSG_PAUSE_SIMULATION,
		TMSG_PLAY_SIMULATION,
		TMSG_START_DEBUGVIEW,
		TMSG_STOP_DEBUGVIEW,
		TMSG_FORWARD_MESSAGE,
		TMSG_REGISTER_ENTITY,
		TMSG_UNREGISTER_ENTITY,
		TMSG_GET_ENTITYSTATUS,
		
		TMSG_REGISTER_APPLICATION,
		TMSG_UNREGISTER_APPLICATION,
		TMSG_APPLICATION_COMMAND,
		TMSG_COMMAND,
		TMSG_APPLICATION_ALERT,
		TMSG_COMMUNICATION_TWEET,
		
		TMSG_NOT_A_MESSAGE_TYPE
	}

	public enum CommandeTypes
	{
		CT_REGISTER = 0,
		CT_REGISTER_END,
		CT_CHANGE_STATE,
		CT_SPAWN_EXTERNAL_ENTITY,
		CT_REMOVE_EXTERNAL_ENTITY,
		CT_CAMERA_SELECT,
		CT_CAMERA_UNSELECT,
		CT_CAMERA_START_RECORD,
		CT_CAMERA_STOP_RECORD,
		CT_CAMERA_PAN_TILT,
		CT_CAMERA_ZOOM,
		CT_CAMERA_PAN_TILT_ZOOM,
		CT_CAMERA_ABSOLUTE_POSITION,
		CT_CAMERA_LOOK_AT,
		CT_REGISTER_ZONE,
		CT_GET_ENTITIES_ROLE_ZONE,
		CT_CHANGE_ENTITY_ROLE,
		CT_CHANGE_VARIABLE_FLOAT,
		CT_SMARTOBJECT_UPDATE_POS_ORI,
		CT_CREATE_SYNTHETICENTITY,
		CT_DELETE_SYNTHETICENTITY,
		CT_REGISTER_SMARTOBJECT_POSITION,
		CT_SPAWN_SMARTOBJECT,
		CT_REMOVE_SMARTOBJECT,
		CT_REGISTER_SMARTOBJECT,
		CT_REPLAN_SYNTHETICENTITY,
		CT_DELETE_ALL_SYNTHETICENTITY,
		CT_CAMERA_SET_NETWORK_CAMERA,
		CT_CAMERA_INCREMENT_POSITION,
		CT_REGISTER_SMARTOBJECT_LINKS,
		CT_MONITOR_VARIABLE,
		CT_NOT_A_CMD = 100000 //should not change : used to generate id for command
	}

	public enum ObjectTypes
	{
		OT_OTHER = 0,
		
		OT_BARRIER,
		OT_CAMERA,
		OT_ESCALATOR,
		OT_EXITBARRIER,
		OT_FIREPANEL,
		OT_GATE,
		OT_LUGGAGE,
		OT_SMOKEDETECTOR,
		OT_SPEAKER,
		OT_TICKETBARRIER,
		OT_TRASH,
		OT_DOOR,
		OT_ZONE,
	}

	[StructLayout(LayoutKind.Explicit)]
	public struct MessageParameter
	{
		[FieldOffset(0)]
		public float float_;

		[FieldOffset(0)]
		public uint unsigned_;

		[FieldOffset(0)]
		public byte char_;

		[FieldOffset(0)]
		public int int_;

		[FieldOffset(0)]
		public bool bool_;

		[FieldOffset(0)]
		public byte char1_;

		[FieldOffset(1)]
		public byte char2_;

		[FieldOffset(2)]
		public byte char3_;

		[FieldOffset(3)]
		public byte char4_;
	}

	[StructLayout(LayoutKind.Sequential)]
	public class MessageSEStar : IMessage
	{
		public uint size;
		public MessageTypes type;                    // Type of the message.
		public MessageTypes subtype;                 // Subtype of the message.
		public uint idSender;                        // SE-Star identifier of the sender of the message.
		public uint idReceiver;                      // SE-Star identifier of the receiver of the message.

		// Parameters of the message (16 + 8 to be able to support longer message).
		[MarshalAs(UnmanagedType.ByValArray, SizeConst = 24)]
		public MessageParameter[] parameters;

		public MessageSEStar(MessageTypes _type, MessageTypes _subType, uint _sender, uint _receiver, MessageParameter[] _parameters)
		{
			type = _type;
			_subType = subtype;
			idSender = _sender;
			idReceiver = _receiver;
			parameters = _parameters;
			size = 112;
		}

		public MessageSEStar()
		{
			size = 112;
		}
	}
}
